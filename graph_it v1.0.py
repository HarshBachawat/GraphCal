#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.12
# In conjunction with Tcl version 8.6
#    Apr 17, 2018 10:43:57 PM

import matplotlib
import warnings
warnings.filterwarnings('ignore')
from matplotlib import pyplot as plt,ticker
matplotlib.use('TkAgg')
import numpy as np
from sympy import *
from sympy.abc import x as rpx,y as rpy
from sympy.parsing.sympy_parser import parse_expr,standard_transformations as st,implicit_multiplication_application as ima
from numpy import *
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2TkAgg
from sympy.core import numbers as num
from mpmath import *
# implement the default mpl key bindings
from matplotlib.backend_bases import key_press_handler


from matplotlib.figure import Figure

import sys


f = Figure( dpi=100)
f.set_tight_layout(True)
a = f.add_subplot(111)
trans = (st+(ima,))
t = arange(-314, 314, 0.01)
major_loc = matplotlib.ticker.MaxNLocator(11)
major_loc1 = matplotlib.ticker.MaxNLocator(6)
minor_loc = matplotlib.ticker.AutoMinorLocator(5)
minor_loc1 = matplotlib.ticker.AutoMinorLocator(5)
a.xaxis.set_major_locator(major_loc)
a.yaxis.set_major_locator(major_loc1)
a.yaxis.set_minor_locator(minor_loc)
a.xaxis.set_minor_locator(minor_loc1)
a.set_ylim(-13,13,1)
y,x = symbols('y x')
a.set_xlim(-23,23,1)
a.set_aspect('equal',anchor='C')
a.spines['left'].set_position('zero')
a.spines['bottom'].set_position('zero')
a.xaxis.set_ticks_position('bottom')
a.yaxis.set_ticks_position('left')
a.grid(which='major',alpha=0.9,linestyle=':',color='k')
a.grid(which='minor',alpha=0.5,linestyle=':',color='k')
plt.ion()
csc = lambda x:1/sin(x)

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    top = New_Toplevel(root)
    root.mainloop()





class New_Toplevel:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        font10 = "-family {Segoe UI} -size 9 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"
        font9 = "-family {Segoe UI} -size 10 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font=font9)
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("1366x705+244+116")
        top.title("gRAPH_IT v1.0")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")
        cot = lambda x: 1/sin(x) 
        global X
        X = np.linspace(-250.0, 250.0, 300000)
        self.vt = StringVar()
        self.vt.trace('w',self.callback)
        self.TEntry1 = ttk.Entry(root,textvariable=self.vt)
        self.TEntry1.place(relx=0.01, rely=0.45, relheight=0.04, relwidth=0.17)
        self.TEntry1.configure(width=236)
        self.TEntry1.configure(background="#d9d9d9")
        self.TEntry1.configure(takefocus="")
        self.TEntry1.configure(cursor="ibeam")
        #self.TEntry1.bind('<Return>',lambda event:self.fill(event,1,1))
        #self.TEntry1.bind('<KeyPress>',lambda event:self.callback(event,1,1))
        self.line = []
        self.plotted =[]
        self.colors =['b', 'g', 'r', 'c', 'm', 'y','#1f77b4','#ff7f0e','#17becf','#9467bd']
        
        self.pi = ttk.Button(top)
        self.pi.place(relx=0.0, rely=0.52, height=35, width=26)
        self.pi.configure(takefocus="")
        self.pi.configure(text='''π''')
        self.pi.bind('<Button-1>',lambda event:self.make_eqn(event,'3.142'))
        
        self.exp = ttk.Button(top)
        self.exp.place(relx=0.02, rely=0.52, height=35, width=26)
        self.exp.configure(takefocus="")
        self.exp.configure(text='''e''')
        self.exp.bind('<Button-1>',lambda event:self.make_eqn(event,'2.718'))
        
        self.Listbox1 = Listbox(root)
        self.Listbox1.place(relx=0.01, rely=0.01, relheight=0.43, relwidth=0.17)
        self.Listbox1.configure(background="white")
        self.Listbox1.configure(disabledforeground="#a3a3a3")
        self.Listbox1.configure(font="TkFixedFont")
        self.Listbox1.configure(foreground="#000000")
        self.Listbox1.configure(highlightbackground="#d9d9d9")
        self.Listbox1.configure(highlightcolor="black")
        self.Listbox1.configure(selectbackground="#c4c4c4")
        self.Listbox1.configure(selectforeground="black")
        self.Listbox1.configure(selectmode=SINGLE)
        self.Listbox1.configure(width=236)

        self.sin = ttk.Button(top)
        self.sin.place(relx=0.0, rely=0.57, height=35, width=56)
        self.sin.configure(takefocus="")
        self.sin.configure(text='''sin''')
        self.sin.bind('<Button-1>',lambda event:self.make_eqn(event,'sin()'))

        self.cos = ttk.Button(top)
        self.cos.place(relx=0.0, rely=0.62, height=35, width=56)
        self.cos.configure(takefocus="")
        self.cos.configure(text='''cos''')
        self.cos.bind('<Button-1>',lambda event:self.make_eqn(event,'cos()'))
        
        self.tan = ttk.Button(top)
        self.tan.place(relx=0.0, rely=0.67, height=35, width=56)
        self.tan.configure(takefocus="")
        self.tan.configure(text='''tan''')
        self.tan.bind('<Button-1>',lambda event:self.make_eqn(event,'tan()'))
        
        
        self.Canvas1 = Canvas(top)
        self.Canvas1.place(relx=0.19, rely=0.01, relheight=0.95, relwidth=0.8)
        self.Canvas1.configure(background="#d9d9d9")
        self.Canvas1.configure(borderwidth="2")
        self.Canvas1.configure(insertbackground="black")
        self.Canvas1.configure(relief=RIDGE)
        self.Canvas1.configure(selectbackground="#c4c4c4")
        self.Canvas1.configure(selectforeground="black")
        self.Canvas1.configure(width=1092)

        self.canvas = FigureCanvasTkAgg(f, master=self.Canvas1)
        self.canvas.draw()
        self.canvas.get_tk_widget().pack(side=TOP, fill=BOTH, expand=1)
        self.canvas.get_tk_widget().configure(width=1093)
        
        toolbar = NavigationToolbar2TkAgg(self.canvas,self.Canvas1)
        toolbar.update()
        self.canvas._tkcanvas.pack(side=TOP, fill=BOTH, expand=1)
        
        self.csc = ttk.Button(top)
        self.csc.place(relx=0.0, rely=0.72, height=35, width=56)
        self.csc.configure(takefocus="")
        self.csc.configure(text='''csc''')
        self.csc.bind('<Button-1>',lambda event:self.make_eqn(event,'csc()'))

        self.sec = ttk.Button(top)
        self.sec.place(relx=0.0, rely=0.77, height=35, width=56)
        self.sec.configure(takefocus="")
        self.sec.configure(text='''sec''')
        self.sec.bind('<Button-1>',lambda event:self.make_eqn(event,'sec()'))

        self.cot = ttk.Button(top)
        self.cot.place(relx=0.0, rely=0.82, height=35, width=56)
        self.cot.configure(takefocus="")
        self.cot.configure(text='''cot''')
        self.cot.bind('<Button-1>',lambda event:self.make_eqn(event,'cot()'))
        

        self.no_1 = ttk.Button(top)
        self.no_1.place(relx=0.05, rely=0.57, height=35, width=26)
        self.no_1.configure(takefocus="")
        self.no_1.configure(text='''1''')
        self.no_1.bind('<Button-1>',lambda event:self.make_eqn(event,'1'))

        self.no_2 = ttk.Button(top)
        self.no_2.place(relx=0.07, rely=0.57, height=35, width=26)
        self.no_2.configure(takefocus="")
        self.no_2.configure(text='''2''')
        self.no_2.bind('<Button-1>',lambda event:self.make_eqn(event,'2'))
        
        self.no_3 = ttk.Button(top)
        self.no_3.place(relx=0.09, rely=0.57, height=35, width=26)
        self.no_3.configure(takefocus="")
        self.no_3.configure(text='''3''')
        self.no_3.bind('<Button-1>',lambda event:self.make_eqn(event,'3'))
        

        self.add = ttk.Button(top)
        self.add.place(relx=0.11, rely=0.57, height=35, width=26)
        self.add.configure(takefocus="")
        self.add.configure(text='''+''')
        self.add.bind('<Button-1>',lambda event:self.make_eqn(event,'+'))

        self.no_4 = ttk.Button(top)
        self.no_4.place(relx=0.05, rely=0.62, height=35
                , width=26)
        self.no_4.configure(takefocus="")
        self.no_4.configure(text='''4''')
        self.no_4.bind('<Button-1>',lambda event:self.make_eqn(event,'4'))

        self.no_5 = ttk.Button(top)
        self.no_5.place(relx=0.07, rely=0.62, height=35
                , width=26)
        self.no_5.configure(takefocus="")
        self.no_5.configure(text='''5''')
        self.no_5.bind('<Button-1>',lambda event:self.make_eqn(event,'5'))

        self.no_6 = ttk.Button(top)
        self.no_6.place(relx=0.09, rely=0.62, height=35
                , width=26)
        self.no_6.configure(takefocus="")
        self.no_6.configure(text='''6''')
        self.no_6.bind('<Button-1>',lambda event:self.make_eqn(event,''))

        self.min = ttk.Button(top)
        self.min.place(relx=0.11, rely=0.62, height=35
                , width=26)
        self.min.configure(takefocus="")
        self.min.configure(text='''-''')
        self.min.bind('<Button-1>',lambda event:self.make_eqn(event,'-'))

        self.no_7 = ttk.Button(top)
        self.no_7.place(relx=0.05, rely=0.67, height=35
                , width=26)
        self.no_7.configure(takefocus="")
        self.no_7.configure(text='''7''')
        self.no_7.bind('<Button-1>',lambda event:self.make_eqn(event,'7'))

        self.no_8 = ttk.Button(top)
        self.no_8.place(relx=0.07, rely=0.67, height=35
                , width=26)
        self.no_8.configure(takefocus="")
        self.no_8.configure(text='''8''')
        self.no_8.bind('<Button-1>',lambda event:self.make_eqn(event,'8'))

        self.no_9 = ttk.Button(top)
        self.no_9.place(relx=0.09, rely=0.67
                , height=35, width=26)
        self.no_9.configure(takefocus="")
        self.no_9.configure(text='''9''')
        self.no_9.bind('<Button-1>',lambda event:self.make_eqn(event,'9'))

        self.mul = ttk.Button(top)
        self.mul.place(relx=0.11, rely=0.67
                , height=35, width=26)
        self.mul.configure(takefocus="")
        self.mul.configure(text='''*''')
        self.mul.bind('<Button-1>',lambda event:self.make_eqn(event,'*'))

        self.l_brac = ttk.Button(top)
        self.l_brac.place(relx=0.05, rely=0.72
                , height=35, width=26)
        self.l_brac.configure(takefocus="")
        self.l_brac.configure(text='''(''')
        self.l_brac.bind('<Button-1>',lambda event:self.make_eqn(event,'('))

        self.no_0 = ttk.Button(top)
        self.no_0.place(relx=0.07, rely=0.72
                , height=35, width=26)
        self.no_0.configure(takefocus="")
        self.no_0.configure(text='''0''')
        self.no_0.bind('<Button-1>',lambda event:self.make_eqn(event,'0'))

        self.r_brac = ttk.Button(top)
        self.r_brac.place(relx=0.09, rely=0.72
                , height=35, width=26)
        self.r_brac.configure(takefocus="")
        self.r_brac.configure(text=''')''')
        self.r_brac.bind('<Button-1>',lambda event:self.make_eqn(event,')'))

        self.div = ttk.Button(top)
        self.div.place(relx=0.11
                , rely=0.72, height=35, width=26)
        self.div.configure(takefocus="")
        self.div.configure(text='''/''')
        self.div.bind('<Button-1>',lambda event:self.make_eqn(event,'/'))

        self.mod = ttk.Button(top)
        self.mod.place(relx=0.05
                , rely=0.77, height=35, width=26)
        self.mod.configure(takefocus="")
        self.mod.configure(text='''|x|''')
        self.mod.bind('<Button-1>',lambda event:self.make_eqn(event,'abs()'))

        self.pow = ttk.Button(top)
        self.pow.place(relx=0.07
                , rely=0.77, height=35, width=26)
        self.pow.configure(takefocus="")
        self.pow.configure(text='xⁿ')
        self.pow.bind('<Button-1>',lambda event:self.make_eqn(event,'**'))
        
        self.sqr = ttk.Button(top)
        self.sqr.place(relx=0.09
                , rely=0.77, height=35, width=26)
        self.sqr.configure(takefocus="")
        self.sqr.configure(text='''√''')
        self.sqr.bind('<Button-1>',lambda event:self.make_eqn(event,'sqrt()'))

        self.log = ttk.Button(top)
        self.log.place(relx=0.11
                , rely=0.77, height=35, width=26)
        self.log.configure(takefocus="")
        self.log.configure(text='''ln''')
        self.log.bind('<Button-1>',lambda event:self.make_eqn(event,'log()'))

        self.eql = ttk.Button(top)
        self.eql.place(relx=0.05
                , rely=0.82, height=35, width=26)
        self.eql.configure(takefocus="")
        self.eql.configure(text='''=''')
        self.eql.bind('<Button-1>',lambda event:self.make_eqn(event,'='))

        self.dec = ttk.Button(top)
        self.dec.place(relx=0.07
                , rely=0.82, height=35, width=26)
        self.dec.configure(takefocus="")
        self.dec.configure(text='''.''')
        self.dec.bind('<Button-1>',lambda event:self.make_eqn(event,'.'))

        self.var_x = ttk.Button(top)
        self.var_x.place(relx=0.09
                , rely=0.82, height=35, width=26)
        self.var_x.configure(takefocus="")
        self.var_x.configure(text='''x''')
        self.var_x.bind('<Button-1>',lambda event:self.make_eqn(event,'x'))

        self.var_y = ttk.Button(top)
        self.var_y.place(relx=0.11
                , rely=0.82, height=35, width=26)
        self.var_y.configure(takefocus="")
        self.var_y.configure(text='''y''')
        self.var_y.bind('<Button-1>',lambda event:self.make_eqn(event,'y'))

        self.bckspc = ttk.Button(top)
        self.bckspc.place(relx=0.14
                , rely=0.57, height=75, width=46)
        self.bckspc.configure(takefocus="")
        self.bckspc.configure(text='''⌫''')
        self.bckspc.configure(width=46)
        self.bckspc.bind('<Button-1>',lambda event:self.backspace(event))

        self.enter = ttk.Button(top)
        self.enter.place(relx=0.14, rely=0.68, height=75, width=46)
        self.enter.configure(takefocus="")
        self.enter.configure(text='''Enter''')
        self.enter.configure(width=46)
        self.enter.bind('<Button-1>',lambda event:self.fill(event))

    def callback(self,event,a1,b):
        try:
            
            self.remove()
            eqn = self.vt.get().split('=')
            if eqn[0]=='y' or eqn[1]=='y' or ('y' in eqn[0]+eqn[1] and 'x' not in eqn[0]+eqn[1]):
                ans = solve(Eq(parse_expr(eqn[0],transformations=trans),parse_expr(eqn[1],transformations=trans)),y)
                rps = rpx
            else:
                ans = solve(Eq(parse_expr(eqn[0],transformations=trans),parse_expr(eqn[1],transformations=trans)),x)
                rps = rpy
            for i in ans:

                j = i.evalf()
                if isinstance(j,(num.Integer,num.Float)):
                    c = np.empty(300000)
                    c.fill(j)
                else:
                    f = lambdify(rps,i)
                    c = f(X)
                if eqn[0]=='x' or eqn[1]=='x':
                    self.line.append(a.plot(c,X)[0])
                else:
                    self.line.append(a.plot(X,c)[0])
                self.line[-1].set_color(self.colors[len(self.plotted)])
            self.canvas.draw()
        except Exception as e:
            print('callback',e)

    def fill(self,event):
        print(self.Listbox1.curselection())
        if self.line != []:
            self.Listbox1.insert(END,self.vt.get())
            self.plotted.append([self.vt.get(),self.line])
            self.line = []
            self.TEntry1.delete(0,END)
            

    def remove(self):
        if self.line != [] :
                for i in range(len(self.line)):
                    self.line[i].remove()
                self.canvas.draw()
                self.line = []

    def make_eqn(self,event,app):
        self.TEntry1.insert(self.TEntry1.index(INSERT),app)
        if app[-2:]=='()':
            self.TEntry1.icursor(self.TEntry1.index(INSERT)-1)

    def backspace(self,event):
        now = self.vt.get()
        curs =self.TEntry1.index(INSERT)
        self.vt.set(now[:curs-1]+now[curs:])
        self.TEntry1.icursor(curs-1)
        print(event)



if __name__ == '__main__':
    vp_start_gui()



